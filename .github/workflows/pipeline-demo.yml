name: Deploy to Amazon ECS

on:
  push:
    branches:
      - main

env:
  AWS_REGION: us-east-1
  IMAGE_NAME: fsouzafs/adopet-web

jobs:
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest
    environment: production
    defaults:
      run:
        shell: bash
        working-directory: ./infra
    outputs:
      ecs_cluster: ${{ steps.terraform_vars.outputs.ecs_cluster }}
      ecs_service: ${{ steps.terraform_vars.outputs.ecs_service }}
      ecs_task_definition: ${{ steps.terraform_vars.outputs.ecs_task_definition }}
      container_name: ${{ steps.terraform_vars.outputs.container_name }}

    steps:
    - name: Checkout
      uses: actions/checkout@v3

    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1
      with:
        cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}
        terraform_version: 1.9.1

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      run: terraform init -input=false

    - name: Gather Outputs
      id: terraform_vars
      run: |
        echo "ecs_cluster=$(terraform-bin output -raw ecs_cluster_name)" >> $GITHUB_OUTPUT
        echo "ecs_service=$(terraform-bin output -raw ecs_frontend_service)" >> $GITHUB_OUTPUT
        echo "ecs_task_definition=$(terraform-bin output -raw ecs_frontend_td)" >> $GITHUB_OUTPUT
        echo "container_name=$(terraform-bin output -raw ecs_frontend_container)" >> $GITHUB_OUTPUT
      
  build_and_publish:
    name: Push Docker image to Docker Hub
    runs-on: ubuntu-latest
    permissions:
      packages: write
      contents: read
      attestations: write
      id-token: write
    outputs:
      image_tag: ${{ steps.get_tag.outputs.image_tag }}
    steps:
      - name: Check out the repo
        uses: actions/checkout@v4

      - name: Log in to Docker Hub
        uses: docker/login-action@f4ef78c080cd8ba55a85445d5b36e214a81df20a
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Get shortened commit hash
        id: get_tag
        run: echo "image_tag=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@9ec57ed1fcdbf14dcef7dfbe97b2010124a938b7
        with:
          images: ${{ env.IMAGE_NAME }}

      - name: Build and push Docker image
        id: push
        uses: docker/build-push-action@3b5e8027fcad23fda98b2e3ac259d8d67585f671
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ env.IMAGE_NAME }}:${{ steps.get_tag.outputs.image_tag }}
          labels: ${{ steps.meta.outputs.labels }}

  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    needs: [terraform, build_and_publish]
    environment: production

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@0e613a0980cbf65ed5b322eb7a1e075d28913a83
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Download task definition
        run: |
          aws ecs describe-task-definition --task-definition ${{needs.terraform.outputs.ecs_task_definition}} --query taskDefinition > task-definition.json

      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@c804dfbdd57f713b6c079302a4c01db7017a36fc
        with:
          task-definition: ./task-definition.json
          container-name: ${{needs.terraform.outputs.container_name}}
          image: ${{ env.IMAGE_NAME }}:${{needs.build_and_publish.outputs.image_tag}}

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@df9643053eda01f169e64a0e60233aacca83799a
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{needs.terraform.outputs.ecs_service}}
          cluster: ${{needs.terraform.outputs.ecs_cluster}}
          wait-for-service-stability: true
